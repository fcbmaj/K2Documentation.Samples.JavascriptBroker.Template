{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\r\n\r\nmetadata = {\r\n  systemName: \"com.k2.example\",\r\n  displayName: \"Example Broker\",\r\n  description: \"An example broker that accesses JSONPlaceholder.\",\r\n};\r\n\r\nondescribe = async function ({ configuration }): Promise<void> {\r\n  postSchema({\r\n    objects: {\r\n      todo: {\r\n        displayName: \"TODO\",\r\n        description: \"Manages a TODO list\",\r\n        properties: {\r\n          id: {\r\n            displayName: \"ID\",\r\n            type: \"number\",\r\n          },\r\n          userId: {\r\n            displayName: \"User ID\",\r\n            type: \"number\",\r\n          },\r\n          title: {\r\n            displayName: \"Title\",\r\n            type: \"string\",\r\n          },\r\n          completed: {\r\n            displayName: \"Completed\",\r\n            type: \"boolean\",\r\n          },\r\n        },\r\n        methods: {\r\n          get: {\r\n            displayName: \"Get TODO\",\r\n            type: \"read\",\r\n            inputs: [\"id\"],\r\n            outputs: [\"id\", \"userId\", \"title\", \"completed\"],\r\n          },\r\n          getItems: {\r\n            displayName: \"Get TODO\",\r\n            type: \"read\",\r\n            parameters: {\r\n              pid: {\r\n                displayName: \"param1\",\r\n                description: \"Description Of Param 1\",\r\n                type: \"number\",\r\n              },\r\n            },\r\n            requiredParameters: [\"pid\"],\r\n            outputs: [\"id\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\nonexecute = async function ({\r\n  objectName,\r\n  methodName,\r\n  parameters,\r\n  properties,\r\n  configuration,\r\n  schema,\r\n}): Promise<void> {\r\n  switch (objectName) {\r\n    case \"todo\":\r\n      await onexecuteTodo(methodName, properties, parameters);\r\n      break;\r\n    default:\r\n      throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n  }\r\n};\r\n\r\nasync function onexecuteTodo(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  parameters: SingleRecord\r\n): Promise<void> {\r\n  switch (methodName) {\r\n    case \"get\":\r\n      await onexecuteTodoGet(properties);\r\n      break;\r\n    case \"getItems\":\r\n      await onexecuteTodoGetAll(parameters);\r\n      break;\r\n    default:\r\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n  }\r\n}\r\n\r\nfunction onexecuteTodoGet(properties: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n      try {\r\n        if (xhr.readyState !== 4) return;\r\n        if (xhr.status !== 200)\r\n          throw new Error(\"Failed with status \" + xhr.status);\r\n\r\n        var obj = JSON.parse(xhr.responseText);\r\n        postResult({\r\n          id: obj.id,\r\n          userId: obj.userId,\r\n          title: obj.title,\r\n          completed: obj.completed,\r\n        });\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n    if (typeof properties[\"id\"] !== \"number\")\r\n      throw new Error('properties[\"id\"] is not of type number');\r\n    xhr.open(\r\n      \"GET\",\r\n      \"https://jsonplaceholder.typicode.com/todos/\" +\r\n        encodeURIComponent(properties[\"id\"])\r\n    );\r\n    xhr.setRequestHeader(\"test\", \"test value\");\r\n    xhr.send();\r\n  });\r\n}\r\n\r\nfunction onexecuteTodoGetAll(parameters: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n    try {\r\n      postResult({\r\n        id: parameters[\"pid\"],\r\n      });\r\n      resolve();\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n"],"names":["metadata","systemName","displayName","description","ondescribe","async","configuration","postSchema","objects","todo","properties","id","type","userId","title","completed","methods","get","inputs","outputs","getItems","parameters","pid","requiredParameters","onexecute","objectName","methodName","schema","Promise","resolve","reject","xhr","XMLHttpRequest","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","e","open","encodeURIComponent","setRequestHeader","send","onexecuteTodoGet","onexecuteTodoGetAll","onexecuteTodo"],"mappings":"AAEAA,SAAW,CACTC,WAAY,iBACZC,YAAa,iBACbC,YAAa,oDAGfC,WAAaC,gBAAgBC,cAAEA,IAC7BC,WAAW,CACTC,QAAS,CACPC,KAAM,CACJP,YAAa,OACbC,YAAa,sBACbO,WAAY,CACVC,GAAI,CACFT,YAAa,KACbU,KAAM,UAERC,OAAQ,CACNX,YAAa,UACbU,KAAM,UAERE,MAAO,CACLZ,YAAa,QACbU,KAAM,UAERG,UAAW,CACTb,YAAa,YACbU,KAAM,YAGVI,QAAS,CACPC,IAAK,CACHf,YAAa,WACbU,KAAM,OACNM,OAAQ,CAAC,MACTC,QAAS,CAAC,KAAM,SAAU,QAAS,cAErCC,SAAU,CACRlB,YAAa,WACbU,KAAM,OACNS,WAAY,CACVC,IAAK,CACHpB,YAAa,SACbC,YAAa,yBACbS,KAAM,WAGVW,mBAAoB,CAAC,OACrBJ,QAAS,CAAC,aAQtBK,UAAYnB,gBAAgBoB,WAC1BA,EAD0BC,WAE1BA,EAF0BL,WAG1BA,EAH0BX,WAI1BA,EAJ0BJ,cAK1BA,EAL0BqB,OAM1BA,WAEQF,OACD,aAQTpB,eACEqB,EACAhB,EACAW,UAEQK,OACD,YAWT,SAA0BhB,UACjB,IAAIkB,QAAc,CAACC,EAASC,SAC7BC,EAAM,IAAIC,kBACdD,EAAIE,mBAAqB,kBAEE,IAAnBF,EAAIG,WAAkB,UACP,MAAfH,EAAII,OACN,MAAM,IAAIC,MAAM,sBAAwBL,EAAII,YAE1CE,EAAMC,KAAKC,MAAMR,EAAIS,cACzBC,WAAW,CACT9B,GAAI0B,EAAI1B,GACRE,OAAQwB,EAAIxB,OACZC,MAAOuB,EAAIvB,MACXC,UAAWsB,EAAItB,YAEjBc,IACA,MAAOa,GACPZ,EAAOY,KAIqB,iBAArBhC,EAAU,GACnB,MAAM,IAAI0B,MAAM,0CAClBL,EAAIY,KACF,MACA,8CACEC,mBAAmBlC,EAAU,KAEjCqB,EAAIc,iBAAiB,OAAQ,cAC7Bd,EAAIe,SAxCIC,CAAiBrC,aAEpB,iBA0CT,SAA6BW,UACpB,IAAIO,QAAc,CAACC,EAASC,SAE/BW,WAAW,CACT9B,GAAIU,EAAU,MAEhBQ,IACA,MAAOa,GACPZ,EAAOY,MAjDDM,CAAoB3B,uBAGpB,IAAIe,MAAM,cAAgBV,EAAa,uBApBvCuB,CAAcvB,EAAYhB,EAAYW,uBAGtC,IAAIe,MAAM,cAAgBX,EAAa"}