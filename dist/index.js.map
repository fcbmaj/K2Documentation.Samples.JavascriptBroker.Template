{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\r\n\r\nmetadata = {\r\n  \"systemName\": \"bazTestBroker\",\r\n  \"displayName\": \"Adobesign Broker\",\r\n  \"description\": \"Adobesign broker that accesses JSONPlaceholder.\",\r\n  \"configuration\": {\r\n      \"ServiceURL\": {\r\n          \"displayName\" : \"Adobesign URL\",\r\n          \"type\" : \"string\",\r\n          \"value\" : \"https://api.na2.adobesign.com/api/rest/v6\"\r\n      },\r\n      \"AccessToken\":{\r\n        \"displayName\" : \"Access Token\",\r\n        \"type\": \"string\",\r\n        \"value\" : \"3AAABLblqZhAsz7fkOci1ND7WDd20jYyUz2iHXweewyBfHX9jB46rtcAVKjL89-ty8o7dqbFLDVje0C5AF5vG_OC88kQNkjfL\"\r\n      }\r\n  }\r\n};\r\n\r\nondescribe = async function ({ configuration }): Promise<void> {\r\n  postSchema({\r\n    objects: {\r\n      todo: {\r\n        displayName: \"Get ID\",\r\n        description: \"Get Transaction ID\",\r\n        properties: {\r\n          id: {\r\n            displayName: \"ID\",\r\n            type: \"number\",\r\n          },\r\n          userId: {\r\n            displayName: \"User ID\",\r\n            type: \"number\",\r\n          },\r\n          title: {\r\n            displayName: \"Title\",\r\n            type: \"string\",\r\n          },\r\n          completed: {\r\n            displayName: \"Completed\",\r\n            type: \"boolean\",\r\n          },\r\n        },\r\n        methods: {\r\n          \"getDocs\": {\r\n            displayName: \"Get Docs\",\r\n            type: \"list\",\r\n            outputs: [\"id\", \"userId\", \"title\", \"completed\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\nonexecute = async function ({\r\n  objectName,\r\n  methodName,\r\n  parameters,\r\n  properties,\r\n  configuration,\r\n  schema,\r\n}): Promise<void> {\r\n  switch (objectName) {\r\n    case \"todo\":\r\n      await onexecuteTodo(methodName, properties, parameters, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n  }\r\n};\r\n\r\nasync function onexecuteTodo(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  parameters: SingleRecord,\r\n  configuration: SingleRecord\r\n\r\n): Promise<void> {\r\n  switch (methodName) {\r\n    case \"getDocs\":\r\n      await onexecuteTransientDocGet(parameters, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n  }\r\n}\r\n\r\nfunction onexecuteTransientDocGet(parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    var urlValue = configuration[\"ServiceURL\"];\r\n    var urlToken = configuration[\"AccessToken\"];\r\n\r\n    console.log(\"1\")\r\n \r\n    var form = new FormData();\r\n    form.append(\"File-Name\", \"testTwo.docx\"); //IMPORTANT\r\n    form.append(\"File\", \"from service broker - sign this doc\");\r\n\r\n    xhr.onreadystatechange = function () {\r\n      try {\r\n        if (xhr.readyState !== 4) return;\r\n        if (xhr.status !== 200)\r\n          throw new Error(\"Failed with status \" + xhr.status + \" ** \" + JSON.stringify(xhr.response) );\r\n\r\n        var obj = JSON.parse(xhr.responseText);\r\n        postResult({\r\n          transientDocumentId: obj.id, \r\n        });\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n\r\n    console.log(urlValue + \"/transientDocuments\")\r\n    // test with nintex\r\n    \r\n    xhr.open(\"POST\", urlValue + \"/transientDocuments\");\r\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + urlToken);\r\n    xhr.setRequestHeader(\"x-api-user\", \"email:nick.williams@ca.fctg.travel\");\r\n\r\n    xhr.send(form);\r\n    console.log(\"3\")\r\n  });\r\n}\r\n\r\n\r\n"],"names":["metadata","ondescribe","async","configuration","postSchema","objects","todo","displayName","description","properties","id","type","userId","title","completed","methods","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","xhr","XMLHttpRequest","urlValue","urlToken","console","log","form","FormData","append","onreadystatechange","readyState","status","Error","JSON","stringify","response","obj","parse","responseText","postResult","transientDocumentId","e","open","setRequestHeader","send","onexecuteTransientDocGet","onexecuteTodo"],"mappings":"AAEAA,SAAW,YACK,4BACC,+BACA,gEACE,YACC,aACM,qBACP,eACC,yDAEA,aACI,oBACR,eACE,uGAKlBC,WAAaC,gBAAgBC,cAAEA,IAC7BC,WAAW,CACTC,QAAS,CACPC,KAAM,CACJC,YAAa,SACbC,YAAa,qBACbC,WAAY,CACVC,GAAI,CACFH,YAAa,KACbI,KAAM,UAERC,OAAQ,CACNL,YAAa,UACbI,KAAM,UAERE,MAAO,CACLN,YAAa,QACbI,KAAM,UAERG,UAAW,CACTP,YAAa,YACbI,KAAM,YAGVI,QAAS,SACI,CACTR,YAAa,WACbI,KAAM,OACNK,QAAS,CAAC,KAAM,SAAU,QAAS,oBAQ/CC,UAAYf,gBAAgBgB,WAC1BA,EAD0BC,WAE1BA,EAF0BC,WAG1BA,EAH0BX,WAI1BA,EAJ0BN,cAK1BA,EAL0BkB,OAM1BA,WAEQH,OACD,aAQThB,eACEiB,EACAV,EACAW,EACAjB,UAGQgB,OACD,gBAQT,SAAkCC,EAA0BjB,UACnD,IAAImB,QAAc,CAACC,EAASC,SAE7BC,EAAM,IAAIC,eACVC,EAAWxB,EAAa,WACxByB,EAAWzB,EAAa,YAE5B0B,QAAQC,IAAI,SAERC,EAAO,IAAIC,SACfD,EAAKE,OAAO,YAAa,gBACzBF,EAAKE,OAAO,OAAQ,uCAEpBR,EAAIS,mBAAqB,kBAEE,IAAnBT,EAAIU,WAAkB,UACP,MAAfV,EAAIW,OACN,MAAM,IAAIC,MAAM,sBAAwBZ,EAAIW,OAAS,OAASE,KAAKC,UAAUd,EAAIe,eAE/EC,EAAMH,KAAKI,MAAMjB,EAAIkB,cACzBC,WAAW,CACTC,oBAAqBJ,EAAI/B,KAE3Ba,IACA,MAAOuB,GACPtB,EAAOsB,KAKXjB,QAAQC,IAAIH,EAAW,uBAGvBF,EAAIsB,KAAK,OAAQpB,EAAW,uBAC5BF,EAAIuB,iBAAiB,gBAAiB,UAAYpB,GAClDH,EAAIuB,iBAAiB,aAAc,sCAEnCvB,EAAIwB,KAAKlB,GACTF,QAAQC,IAAI,OA7CJoB,CAAyB9B,EAAYjB,uBAGrC,IAAIkC,MAAM,cAAgBlB,EAAa,uBAnBvCgC,CAAchC,EAAYV,EAAYW,EAAYjB,uBAGlD,IAAIkC,MAAM,cAAgBnB,EAAa"}