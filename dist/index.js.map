{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\r\n\r\nmetadata = {\r\n  \"systemName\": \"bazTestBroker\",\r\n  \"displayName\": \"Adobesign Broker\",\r\n  \"description\": \"Adobesign broker that accesses JSONPlaceholder.\",\r\n  \"configuration\": {\r\n      \"ServiceURL\": {\r\n          \"displayName\" : \"Adobesign URL\",\r\n          \"type\" : \"string\",\r\n          \"value\" : \"https://api.na2.adobesign.com/api/rest/v6\"\r\n      },\r\n      \"AccessToken\":{\r\n        \"displayName\" : \"Access Token\",\r\n        \"type\": \"string\",\r\n        \"value\" : \"3AAABLblqZhAsz7fkOci1ND7WDd20jYyUz2iHXweewyBfHX9jB46rtcAVKjL89-ty8o7dqbFLDVje0C5AF5vG_OC88kQNkjfL\"\r\n      }\r\n  }\r\n};\r\n\r\nondescribe = async function ({ configuration }): Promise<void> {\r\n  postSchema({\r\n    objects: {\r\n      todo: {\r\n        displayName: \"Get ID\",\r\n        description: \"Get Transaction ID\",\r\n        properties: {\r\n          id: {\r\n            displayName: \"ID\",\r\n            type: \"number\",\r\n          },\r\n          userId: {\r\n            displayName: \"User ID\",\r\n            type: \"number\",\r\n          },\r\n          title: {\r\n            displayName: \"Title\",\r\n            type: \"string\",\r\n          },\r\n          completed: {\r\n            displayName: \"Completed\",\r\n            type: \"boolean\",\r\n          },\r\n        },\r\n        methods: {\r\n          // \"get\": {\r\n          //   displayName: \"Get TO DO\",\r\n          //   type: \"read\",\r\n          //   inputs: [\"id\"],\r\n          //   outputs: [\"id\", \"userId\", \"title\", \"completed\"],\r\n          // },\r\n          // \"getItems\": {\r\n          //   displayName: \"Get TO DOs\",\r\n          //   type: \"list\",\r\n          //   outputs: [\"id\", \"userId\", \"title\", \"completed\"],\r\n          // },\r\n          \"getDocs\": {\r\n            displayName: \"Get Docs\",\r\n            type: \"list\",\r\n            outputs: [\"id\", \"userId\", \"title\", \"completed\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\nonexecute = async function ({\r\n  objectName,\r\n  methodName,\r\n  parameters,\r\n  properties,\r\n  configuration,\r\n  schema,\r\n}): Promise<void> {\r\n  switch (objectName) {\r\n    case \"todo\":\r\n      await onexecuteTodo(methodName, properties, parameters, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n  }\r\n};\r\n\r\nasync function onexecuteTodo(\r\n  methodName: string,\r\n  properties: SingleRecord,\r\n  parameters: SingleRecord,\r\n  configuration: SingleRecord\r\n\r\n): Promise<void> {\r\n  switch (methodName) {\r\n    case \"get\":\r\n      await onexecuteTodoGet(properties, configuration);\r\n      break;\r\n    case \"getItems\":\r\n      await onexecuteTodoGetAll(parameters, configuration);\r\n      break;\r\n    case \"getDocs\":\r\n      await onexecuteTransientDocGet(parameters, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n  }\r\n}\r\n\r\n// function onexecuteTodoGet(properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n//   return new Promise<void>((resolve, reject) => {\r\n    \r\n//     var xhr = new XMLHttpRequest();\r\n//     var urlValue = configuration[\"ServiceURL\"];\r\n    \r\n//     xhr.onreadystatechange = function () {\r\n//       try {\r\n//         if (xhr.readyState !== 4) return;\r\n//         if (xhr.status !== 200)\r\n//           throw new Error(\"Failed with status \" + xhr.status);\r\n\r\n//         var obj = JSON.parse(xhr.responseText);\r\n//         postResult({\r\n//           id: obj.id,\r\n//           userId: obj.userId,\r\n//           title: obj.title,\r\n//           completed: obj.completed,\r\n//         });\r\n//         resolve();\r\n//       } catch (e) {\r\n//         reject(e);\r\n//       }\r\n//     };\r\n\r\n//     if (typeof properties[\"id\"] !== \"number\")\r\n//       throw new Error('properties[\"id\"] is not of type number');\r\n//     xhr.open(\"GET\",urlValue + \"/todos/\" + encodeURIComponent(properties[\"id\"]));\r\n//     xhr.setRequestHeader(\"test\", \"test value\");\r\n//     xhr.send();\r\n//   });\r\n// }\r\n\r\n// function onexecuteTodoGetAll(parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n//   return new Promise<void>((resolve, reject) => {\r\n\r\n//     var xhr = new XMLHttpRequest();\r\n//     var urlValue = configuration[\"ServiceURL\"];\r\n \r\n//     xhr.onreadystatechange = function () {\r\n//       try {\r\n//         if (xhr.readyState !== 4) return;\r\n//         if (xhr.status !== 200)\r\n//           throw new Error(\"Failed with status \" + xhr.status);\r\n\r\n//         var obj = JSON.parse(xhr.responseText);\r\n//         postResult(obj.map(x => {\r\n//           return {\r\n//           \"id\": x.id,\r\n//           \"userId\": x.userId,\r\n//           \"title\": x.title,\r\n//           \"completed\": x.completed\r\n//           }\r\n//         }));\r\n//         resolve();\r\n//       } catch (e) {\r\n//         reject(e);\r\n//       }\r\n//     };\r\n//     xhr.open(\"GET\", urlValue + \"/todos\");\r\n//     xhr.send();\r\n//   });\r\n// }\r\n\r\nfunction onexecuteTransientDocGet(parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    var urlValue = configuration[\"ServiceURL\"];\r\n    var urlToken = configuration[\"AccessToken\"];\r\n\r\n    console.log(\"1\")\r\n \r\n    var form = new FormData();\r\n    //---\r\n    form.append(\"File\", \"from service broker - sign this doc\");\r\n    form.append(\"File-Name\", \"TestTwo.docx\");\r\n    //---\r\n\r\n    xhr.onreadystatechange = function () {\r\n      try {\r\n        if (xhr.readyState !== 4) return;\r\n        if (xhr.status !== 200)\r\n          throw new Error(\"Failed with status \" + xhr.status);\r\n\r\n        var obj = JSON.parse(xhr.responseText);\r\n        postResult({\r\n          transientDocumentId: obj.id, \r\n        });\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n\r\n    console.log(\"2\")\r\n    // test with nintex\r\n    \r\n    xhr.open(\"POST\", urlValue + \"/transientDocuments\");\r\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + urlToken);\r\n    xhr.setRequestHeader(\"Content-Type\", \"application/form-data\");\r\n    xhr.setRequestHeader(\"x-api-user\", \"email:nick.williams@ca.fctg.travel\");\r\n    ///----------------\r\n\r\n    ///----------------\r\n    xhr.send(form);\r\n    console.log(\"3\")\r\n  });\r\n}\r\n\r\n\r\n"],"names":["metadata","ondescribe","async","configuration","postSchema","objects","todo","displayName","description","properties","id","type","userId","title","completed","methods","outputs","onexecute","objectName","methodName","parameters","schema","onexecuteTodoGet","onexecuteTodoGetAll","Promise","resolve","reject","xhr","XMLHttpRequest","urlValue","urlToken","console","log","form","FormData","append","onreadystatechange","readyState","status","Error","obj","JSON","parse","responseText","postResult","transientDocumentId","e","open","setRequestHeader","send","onexecuteTransientDocGet","onexecuteTodo"],"mappings":"AAEAA,SAAW,YACK,4BACC,+BACA,gEACE,YACC,aACM,qBACP,eACC,yDAEA,aACI,oBACR,eACE,uGAKlBC,WAAaC,gBAAgBC,cAAEA,IAC7BC,WAAW,CACTC,QAAS,CACPC,KAAM,CACJC,YAAa,SACbC,YAAa,qBACbC,WAAY,CACVC,GAAI,CACFH,YAAa,KACbI,KAAM,UAERC,OAAQ,CACNL,YAAa,UACbI,KAAM,UAERE,MAAO,CACLN,YAAa,QACbI,KAAM,UAERG,UAAW,CACTP,YAAa,YACbI,KAAM,YAGVI,QAAS,SAYI,CACTR,YAAa,WACbI,KAAM,OACNK,QAAS,CAAC,KAAM,SAAU,QAAS,oBAQ/CC,UAAYf,gBAAgBgB,WAC1BA,EAD0BC,WAE1BA,EAF0BC,WAG1BA,EAH0BX,WAI1BA,EAJ0BN,cAK1BA,EAL0BkB,OAM1BA,WAEQH,OACD,aAQThB,eACEiB,EACAV,EACAW,EACAjB,UAGQgB,OACD,YACGG,iBAAiBb,EAAYN,aAEhC,iBACGoB,oBAAoBH,EAAYjB,aAEnC,gBAwET,SAAkCiB,EAA0BjB,UACnD,IAAIqB,QAAc,CAACC,EAASC,SAE7BC,EAAM,IAAIC,eACVC,EAAW1B,EAAa,WACxB2B,EAAW3B,EAAa,YAE5B4B,QAAQC,IAAI,SAERC,EAAO,IAAIC,SAEfD,EAAKE,OAAO,OAAQ,uCACpBF,EAAKE,OAAO,YAAa,gBAGzBR,EAAIS,mBAAqB,kBAEE,IAAnBT,EAAIU,WAAkB,UACP,MAAfV,EAAIW,OACN,MAAM,IAAIC,MAAM,sBAAwBZ,EAAIW,YAE1CE,EAAMC,KAAKC,MAAMf,EAAIgB,cACzBC,WAAW,CACTC,oBAAqBL,EAAI9B,KAE3Be,IACA,MAAOqB,GACPpB,EAAOoB,KAKXf,QAAQC,IAAI,KAGZL,EAAIoB,KAAK,OAAQlB,EAAW,uBAC5BF,EAAIqB,iBAAiB,gBAAiB,UAAYlB,GAClDH,EAAIqB,iBAAiB,eAAgB,yBACrCrB,EAAIqB,iBAAiB,aAAc,sCAInCrB,EAAIsB,KAAKhB,GACTF,QAAQC,IAAI,OAlHJkB,CAAyB9B,EAAYjB,uBAGrC,IAAIoC,MAAM,cAAgBpB,EAAa,uBAzBvCgC,CAAchC,EAAYV,EAAYW,EAAYjB,uBAGlD,IAAIoC,MAAM,cAAgBrB,EAAa"}