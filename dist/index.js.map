{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import \"@k2oss/k2-broker-core\";\r\n\r\nmetadata = {\r\n  \"systemName\": \"bazTestBroker\",\r\n  \"displayName\": \"Adobesign Broker\",\r\n  \"description\": \"Adobesign broker that accesses JSONPlaceholder.\",\r\n  \"configuration\": {\r\n      \"ServiceURL\": {\r\n          \"displayName\" : \"Adobesign URL\",\r\n          \"type\" : \"string\",\r\n          \"value\" : \"https://api.na2.adobesign.com/api/rest/v6\"\r\n      },\r\n      \"AccessToken\":{\r\n        \"displayName\" : \"Access Token\",\r\n        \"type\": \"string\",\r\n        \"value\" : \"3AAABLblqZhAsz7fkOci1ND7WDd20jYyUz2iHXweewyBfHX9jB46rtcAVKjL89-ty8o7dqbFLDVje0C5AF5vG_OC88kQNkjfL\"\r\n      }\r\n  }\r\n};\r\n\r\n//raw file not updating\r\nondescribe = async function ({ configuration }): Promise<void> {\r\n  postSchema({\r\n    objects: {\r\n      getid: {\r\n        displayName: \"Get ID\",\r\n        description: \"Get Transaction ID\",\r\n        properties: {\r\n          transientDocumentId: {\r\n            displayName: \"transient Document Id\",\r\n            type: \"string\",\r\n          },\r\n        },\r\n        methods: {\r\n          \"getDocs\": {\r\n            displayName: \"Get Docs\",\r\n            type: \"list\",\r\n            outputs: [\"transientDocumentId\"],\r\n          },\r\n        },\r\n      },\r\n    },\r\n  });\r\n};\r\n\r\nonexecute = async function ({objectName, methodName, parameters, properties, configuration, schema}): Promise<void> {\r\n  switch (objectName) {\r\n    case \"getid\":\r\n      await onexecuteGetId(methodName, parameters, properties, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The object \" + objectName + \" is not supported.\");\r\n  }\r\n};\r\n\r\nasync function onexecuteGetId(methodName: string, parameters: SingleRecord, properties: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n  switch (methodName) {\r\n    case \"getDocs\":\r\n      await onexecuteTransientDocGet(parameters, configuration);\r\n      break;\r\n    default:\r\n      throw new Error(\"The method \" + methodName + \" is not supported.\");\r\n  }\r\n}\r\n\r\nfunction onexecuteTransientDocGet(parameters: SingleRecord, configuration: SingleRecord): Promise<void> {\r\n  return new Promise<void>((resolve, reject) => {\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    var urlValue = configuration[\"ServiceURL\"];\r\n    var urlToken = configuration[\"AccessToken\"];\r\n\r\n    console.log(\"Token and URL good\");\r\n \r\n    var form = new FormData();\r\n    form.append(\"File-Name\", \"testTwo.docx\"); //IMPORTANT\r\n    form.append(\"File\", \"from service broker - sign this doc\");\r\n\r\n    xhr.onreadystatechange = function () {\r\n      try {\r\n        if (xhr.readyState !== 4) return;\r\n        if (xhr.status !== 200)\r\n          throw new Error(\"Failed with status \" + xhr.status + \" ** \" + JSON.stringify(xhr.response) );\r\n\r\n        var obj = JSON.parse(xhr.responseText);\r\n        postResult({\r\n          transientDocumentId: obj.id, \r\n        });\r\n        resolve();\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n\r\n    console.log(urlValue + \"/transientDocuments\");\r\n    // test with nintex\r\n    \r\n    xhr.open(\"POST\", urlValue + \"/transientDocuments\");\r\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + urlToken);\r\n    xhr.setRequestHeader(\"x-api-user\", \"email:nick.williams@ca.fctg.travel\");\r\n\r\n    xhr.send();\r\n    console.log(JSON.stringify(form));\r\n  });\r\n}\r\n\r\n\r\n"],"names":["metadata","ondescribe","async","configuration","postSchema","objects","getid","displayName","description","properties","transientDocumentId","type","methods","outputs","onexecute","objectName","methodName","parameters","schema","Promise","resolve","reject","xhr","XMLHttpRequest","urlValue","urlToken","console","log","form","FormData","append","onreadystatechange","readyState","status","Error","JSON","stringify","response","obj","parse","responseText","postResult","id","e","open","setRequestHeader","send","onexecuteTransientDocGet","onexecuteGetId"],"mappings":"AAEAA,SAAW,YACK,4BACC,+BACA,gEACE,YACC,aACM,qBACP,eACC,yDAEA,aACI,oBACR,eACE,uGAMlBC,WAAaC,gBAAgBC,cAAEA,IAC7BC,WAAW,CACTC,QAAS,CACPC,MAAO,CACLC,YAAa,SACbC,YAAa,qBACbC,WAAY,CACVC,oBAAqB,CACnBH,YAAa,wBACbI,KAAM,WAGVC,QAAS,SACI,CACTL,YAAa,WACbI,KAAM,OACNE,QAAS,CAAC,8BAQtBC,UAAYZ,gBAAgBa,WAACA,EAADC,WAAaA,EAAbC,WAAyBA,EAAzBR,WAAqCA,EAArCN,cAAiDA,EAAjDe,OAAgEA,WAClFH,OACD,cAQTb,eAA8Bc,EAAoBC,EAA0BR,EAA0BN,UAC5Fa,OACD,gBAQT,SAAkCC,EAA0Bd,UACnD,IAAIgB,QAAc,CAACC,EAASC,SAE7BC,EAAM,IAAIC,eACVC,EAAWrB,EAAa,WACxBsB,EAAWtB,EAAa,YAE5BuB,QAAQC,IAAI,0BAERC,EAAO,IAAIC,SACfD,EAAKE,OAAO,YAAa,gBACzBF,EAAKE,OAAO,OAAQ,uCAEpBR,EAAIS,mBAAqB,kBAEE,IAAnBT,EAAIU,WAAkB,UACP,MAAfV,EAAIW,OACN,MAAM,IAAIC,MAAM,sBAAwBZ,EAAIW,OAAS,OAASE,KAAKC,UAAUd,EAAIe,eAE/EC,EAAMH,KAAKI,MAAMjB,EAAIkB,cACzBC,WAAW,CACT/B,oBAAqB4B,EAAII,KAE3BtB,IACA,MAAOuB,GACPtB,EAAOsB,KAKXjB,QAAQC,IAAIH,EAAW,uBAGvBF,EAAIsB,KAAK,OAAQpB,EAAW,uBAC5BF,EAAIuB,iBAAiB,gBAAiB,UAAYpB,GAClDH,EAAIuB,iBAAiB,aAAc,sCAEnCvB,EAAIwB,OACJpB,QAAQC,IAAIQ,KAAKC,UAAUR,MA7CnBmB,CAAyB9B,EAAYd,uBAGrC,IAAI+B,MAAM,cAAgBlB,EAAa,uBAbvCgC,CAAehC,EAAYC,EAAYR,EAAYN,uBAGnD,IAAI+B,MAAM,cAAgBnB,EAAa"}